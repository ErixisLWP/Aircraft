@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + increaseHp(int increase):void
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<BaseBullet>
 }


class HeroAircraft {
    - shootNum:int
    - power:int
    - direction:int
    - {static} instance:HeroAircraft
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + {static} getInstance(int locationX, int locationY, int speedX, int speedY, int hp):HeroAircraft
    + forward():void
    + shoot():List<BaseBullet>
}

Client --> HeroAircraft : getInstance()
HeroAircraft <-- HeroAircraft : -instance

class Enemy {
    - score:int
    + Enemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + getScore():int
    + setScore(int score):void
    + dropProp(List<BaseProp> props, int locationX, int locationY):void
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + dropProp():void
}

class EliteEnemy {
    - shootNum:int
    - power:int
    - direction:int
    - bulletSpeedX:int
    - bulletSpeedY:int
    - {static} propRate:double
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + shoot():List<BaseBullet>
    + dropProp():void
    + getPropRate():double
}

Enemy <|-- MobEnemy
Enemy <|-- EliteEnemy

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- Enemy

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

class BaseProp {
    + BaseProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + takeEffect(HeroAircraft heroAircraft):void
}

class BloodProp {
    - healingHP:int
    + BloodProp(int locationX, int locationY, int speedX, int speedY, int healingHP)
    + getHealingHP():int
    - heal(HeroAircraft heroAircraft):void
    + takeEffect(HeroAircraft heroAircraft):void
}

class BombProp {
    + BombProp(int locationX, int locationY, int speedX, int speedY, int healingHP)
    - boom(HeroAircraft heroAircraft):void
    + takeEffect(HeroAircraft heroAircraft):void
}

class BulletProp {
    + BulletProp(int locationX, int locationY, int speedX, int speedY, int healingHP)
    - fireSupply(HeroAircraft heroAircraft):void
    + takeEffect(HeroAircraft heroAircraft):void
}

BaseProp <|-- BloodProp
BaseProp <|-- BombProp
BaseProp <|-- BulletProp

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- BaseProp

interface EnemyCreator {
    + createEnemy():Enemy
}

class MobEnemyCreator {
    - speedX:int
    - speedY:int
    - hp:int
    + createEnemy():MobEnemy
}

MobEnemy <.. MobEnemyCreator

class EliteEnemyCreator {
    - speedX:int
    - speedY:int
    - hp:int
    + createEnemy():EliteEnemy
}

EliteEnemy <.. EliteEnemyCreator

EnemyCreator <|.. MobEnemyCreator
EnemyCreator <|.. EliteEnemyCreator

interface PropCreator {
    + createProp(int locationX, int locationY):BaseProp
}

class BloodPropCreator {
    - speedX:int
    - speedY:int
    + createProp(int locationX, int locationY):BloodProp
}

BloodProp <.. BloodPropCreator

class BombPropCreator {
    - speedX:int
    - speedY:int
    + createProp(int locationX, int locationY):BombProp
}

BombProp <.. BombPropCreator

class BulletPropCreator {
    - speedX:int
    - speedY:int
    + createProp(int locationX, int locationY):BulletProp
}

BulletProp <.. BulletPropCreator

PropCreator <|.. BloodPropCreator
PropCreator <|.. BombPropCreator
PropCreator <|.. BulletPropCreator

@enduml